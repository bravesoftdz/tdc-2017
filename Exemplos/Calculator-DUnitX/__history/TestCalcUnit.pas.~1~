unit TestCalcUnit;

interface
uses
  DUnitX.TestFramework, CalcUnit;

type

  [TestFixture]
  TestTCalc = class(TObject)
  strict private
    aTCalc: TCalc;
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;

    // Test with TestCase Atribute to supply parameters.
    [TestCase('TestA','8,2,10')]
    [TestCase('TestA','5,5,10')]
    [TestCase('TestA','4,2,6')]
    [TestCase('TestA','8000,2,8002')]
    [TestCase('TestA','1,10000,10001')]
    procedure TesteSoma(Value1, Value2, _Result: Integer);

    // Test with TestCase Atribute to supply parameters.
    [TestCase('TestB','3,4,-1')]
    [TestCase('TestB','5,4,1')]
    [TestCase('TestB','100,90,10')]
    [TestCase('TestB','100,80,10')]
    procedure TesteSubtracao(Value1, Value2, _Result: Integer);
  end;

implementation

procedure TestTCalc.Setup;
begin
  aTCalc := TCalc.Create;
end;

procedure TestTCalc.TearDown;
begin
  aTCalc := nil;
end;

procedure TestTCalc.TesteSoma(Value1, Value2, _Result: Integer);
var
  R: Integer;
begin
  R := aTCalc.Add(Value1, Value2);
  Assert.AreEqual(R, _Result);   // testcode
end;

procedure TestTCalc.TesteSubtracao(Value1, Value2, _Result: Integer);
var
  R: Integer;
begin
  R := aTCalc.Sub(Value1, Value2);
  Assert.AreEqual(R, _Result);  // testcode
 end;

initialization
  TDUnitX.RegisterTestFixture(TestTCalc);
end.
