{
This software is distributed under the BSD license.

Copyright (c) 2011, Tomasz Maszkowski
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
- Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
- The name of Tomasz Maszkowski may not be used to endorse or promote
  products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

History:

}
unit TestCaseBase;

interface
uses
  TestFramework,
  SysUtils,
  FutureWindows;

type
  TTestCaseBase = class(TTestCase, IExceptionHandler)
  strict private
    FDeferedException: Exception;
    FDeferedExceptAddr: Pointer;
  private
    procedure HandleException(AExceptObject: TObject; AExceptAddr: Pointer);
  protected
    procedure TearDown; override;
  public
    class procedure ProcessMessages(AWaitSeconds: Double = 0.0);
  end;
implementation
uses
  Windows,
  Forms;
{ TTestCaseBase }

procedure TTestCaseBase.HandleException(AExceptObject: TObject;
  AExceptAddr: Pointer);
begin
  FDeferedException := AExceptObject as Exception;
  FDeferedExceptAddr := AExceptAddr;
end;

class procedure TTestCaseBase.ProcessMessages(AWaitSeconds: Double);
var
  now, finish: Cardinal;
begin
  if AWaitSeconds = 0 then
    Application.ProcessMessages()
  else
  begin
    now := GetTickCount;
    finish := now + Round(AWaitSeconds * 1000);
    while now < finish do
    begin
      Application.ProcessMessages();
      now := GetTickCount;
    end;
  end;
end;

procedure TTestCaseBase.TearDown;
var
  e: Exception;
begin
  if FDeferedException <> nil then
  begin
    e := FDeferedException;
    FDeferedException := nil;
    raise e at FDeferedExceptAddr;
  end;
  inherited;
end;

end.
