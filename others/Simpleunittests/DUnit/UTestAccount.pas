unit UTestAccount;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  UAccount;

type
  TestTAccount = class(TTestCase)
  strict private
    FAccount: TAccount;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDeposit;
    procedure TestWithdraw;
    procedure TestExceedOverdraftLimit;
    procedure TestBalance;
  end;

implementation

procedure TestTAccount.SetUp;
begin
  FAccount := TAccount.Create;
end;

procedure TestTAccount.TearDown;
begin
  FAccount.Free;
  FAccount := nil;
end;

procedure TestTAccount.TestWithdraw;
var
  ReturnValue: Currency;
  Amount: Currency;
begin
  Amount := 50.00;
  ReturnValue := FAccount.Withdraw(Amount);
  CheckEquals(-Amount, ReturnValue, 'ReturnValue');
  CheckEquals(-Amount, FAccount.Balance, 'Balance');
end;

procedure TestTAccount.TestBalance;
begin
  CheckEquals(0, FAccount.Balance, 'Balance');
  FAccount.Free;
  FAccount := TAccount.Create(50);
  CheckEquals(50, FAccount.Balance);
end;

procedure TestTAccount.TestDeposit;
var
  ReturnValue: Currency;
  Amount: Currency;
begin
  Amount := 50.00;
  ReturnValue := FAccount.Deposit(Amount);
  CheckEquals(Amount, ReturnValue, 'ReturnValue');
  CheckEquals(Amount, FAccount.Balance, 'Balance');
end;

procedure TestTAccount.TestExceedOverdraftLimit;
begin
  StartExpectingException(EOverdraftLimitExceeded);
  FAccount.Withdraw(700.00);
  StopExpectingException('EOverdraftLimitExceeded should have been raised');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAccount.Suite);
end.

