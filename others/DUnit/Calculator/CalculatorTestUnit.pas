unit CalculatorTestUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, uCalculator;

type
  // Test methods for class TCalculator

//  TestTCalculator = class(TTestCase)
//  strict private
//    TempCalc: TCalculator;
//  private
//    function AddNumbers(const A, B: integer): integer;
//  public
//    procedure SetUp; override;
//    procedure TearDown; override;
//  published
//    // This is where the test methods go
//    procedure TestAddition;
//    procedure TestWithData;
//  end;



//
  TestTCalculator = class(TTestCase)
  strict private
    TempCalc: TCalculator;
  private
    function AddNumbers(const A, B: integer): integer;
    function SubtractNumbers(const A, B: integer): integer;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    // This is where the test methods go
    procedure TestAddition;
    procedure TestWithData;
    procedure TestSubtraction;
  end;



implementation

uses SysUtils;

procedure TestTCalculator.SetUp;
begin
  TempCalc := TCalculator.Create;
end;

procedure TestTCalculator.TearDown;
begin
  TempCalc.Free;
  TempCalc := nil;
end;

function TestTCalculator.AddNumbers(const A, B: integer): integer;
begin
  TempCalc.Clear;
  TempCalc.Enter(A);
  TempCalc.PressPlus;
  TempCalc.Enter(B);
  TempCalc.PressEquals;
  Result := TempCalc.Display;
end;

procedure TestTCalculator.TestAddition;
var
  TestResult, ExpectedResult: integer;
begin
  TestResult := AddNumbers(2, 3);
  ExpectedResult := 5;
  CheckEquals(ExpectedResult, TestResult, 'If this is not five, then we have a serious problem');

  TestResult := AddNumbers(-1, 3);
  ExpectedResult := 2;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := AddNumbers(-10, 3);
  ExpectedResult := -7;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := AddNumbers(-10, -3);
  ExpectedResult := -13;
  CheckEquals(ExpectedResult, TestResult);

  TestResult := AddNumbers(0, 0);
  ExpectedResult := 0;
  CheckEquals(ExpectedResult, TestResult);

end;



type
  TCalculatorRecord = record
    A: integer;
    B: integer;
    Result: integer;
    constructor Create(aA, aB, aResult: integer);
  end;
//
constructor TCalculatorRecord.Create(aA, aB, aResult: integer);
begin
  A := aA;
  B := aB;
  Result := aResult;
end;
//
type
  TCalculations = array of TCalculatorRecord;

function CreateCalculations: TCalculations;
begin
  Result := TCalculations.Create(TCalculatorRecord.Create(2, 2, 4),
    TCalculatorRecord.Create(-1, 2, 1),
    TCalculatorRecord.Create(0, 0, 0),
    TCalculatorRecord.Create(0, 2, 2),
    TCalculatorRecord.Create(0, -1, -1),
    TCalculatorRecord.Create(2234, 2, 2236),
    TCalculatorRecord.Create(-1, -3, -4),
    //TCalculatorRecord.Create(Maxint, 1, Maxint + 1),
    TCalculatorRecord.Create(0, 0, 0),
    TCalculatorRecord.Create(1, 1, 2)

    );
end;

procedure TestTCalculator.TestWithData;
var
  i: integer;
  Expected, TestResult: integer;
  CDates: TCalculations;
begin
  CDates := CreateCalculations;
  for i := Low(CDates) to High(CDates) do
  begin
    Expected := CDates[i].Result;
    TestResult := AddNumbers(CDates[i].A, CDates[i].B);
    CheckEquals(Expected, TestResult);
  end;
end;


// Subtraction below


function TestTCalculator.SubtractNumbers(const A, B: integer): integer;
begin
  TempCalc.Clear;
  TempCalc.Enter(A);
  TempCalc.PressSubtract;
  TempCalc.Enter(B);
  TempCalc.PressEquals;
  Result := TempCalc.Display;
end;



function CreateSubtractionCalculations: TCalculations;
begin
  Result := TCalculations.Create(
    TCalculatorRecord.Create(2, 2, 0),
    TCalculatorRecord.Create(-1, 2, -3),
    TCalculatorRecord.Create(0, 0, 0),
    TCalculatorRecord.Create(0, 2, -2),
    TCalculatorRecord.Create(0, -1, 1),
    TCalculatorRecord.Create(2234, 2, 2232),
    TCalculatorRecord.Create(1, 1, 0),
    TCalculatorRecord.Create(-1, -2, 1),
    TCalculatorRecord.Create(-1, -3, 2));

end;

procedure TestTCalculator.TestSubtraction;
var
  i: integer;
  Expected, TestResult: integer;
  CDates: TCalculations;
begin
  CDates := CreateSubtractionCalculations;
  for i := Low(CDates) to High(CDates) do
  begin
    //Arrange
    TempCalc.Clear;
    Expected := CDates[i].Result;
    //Act
    TestResult := SubtractNumbers(CDates[i].A, CDates[i].B);
    //Assert
    CheckEquals(Expected, TestResult, Format('You idiot, cant''t you subtract??? -- Failed for %d and %d', [CDates[i].A, CDates[i].B]));
  end;
end;


initialization

// Register any test cases with the test runner
RegisterTest(TestTCalculator.Suite);

end.
