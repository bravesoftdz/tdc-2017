unit TestUnit1;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, SysUtils, Unit1;

type
  TTestCode = reference to procedure;  //TProc
  TClassOfException = class of Exception;

type
  // Test methods for class TMyClass

TestTMyClass = class(TTestCase)
  strict private
    FMyClass: TExceptionRaiser;
    procedure ExceptionRaisingMethod;
  private
    procedure CheckForException(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    // This is where the test methods go
    procedure TestThatExceptionHappensUsingWrapper;
    procedure TestThatExceptionHappensUsingCheckException;
    procedure TestWithAnonymousMethods;
  end;

implementation

procedure TestTMyClass.ExceptionRaisingMethod;
begin
  FMyClass.RaiseTestingException;
end;

procedure TestTMyClass.SetUp;
begin
  FMyClass := TExceptionRaiser.Create;
end;

procedure TestTMyClass.TearDown;
begin
  FMyClass.Free;
  FMyClass := nil;
end;

procedure TestTMyClass.TestThatExceptionHappensUsingCheckException;
begin
   CheckException(FMyClass.RaiseTestingException, ETestingException);
end;

procedure TestTMyClass.TestThatExceptionHappensUsingWrapper;
begin
  //Arrange
  StartExpectingException(ETestingException);
  //Act
  FMyClass.RaiseTestingException;
  //Assert
  StopExpectingException('Stopped waiting for ETestingException to be raised');

end;

procedure TestTMyClass.TestWithAnonymousMethods;
begin
  CheckForException(ETestingException,
        procedure
        begin
          FMyClass.RaiseTestingException
        end,
        'The ETestingException exception didn''t get raised.  That is impossible!');
//  CheckForException(ETestingException, procedure begin FMyClass.NoExceptionRaised('blah') end, 'There was no exception raised, and there should have been');

end;

procedure TestTMyClass.CheckForException(aExceptionType: TClassOfException; aCode: TTestCode; const aMessage: String);
var
  WasException: Boolean;
begin
  WasException := False;
  try
    aCode;
  except
    on E: Exception do
    begin
      if E is aExceptionType then
      begin
        WasException := True;
      end;
    end;
  end;
  Check(WasException, aMessage);
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMyClass.Suite);
end.

